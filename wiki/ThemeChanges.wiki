#summary How to integrate ZP into a custom theme
= Introduction =

This document explains changes you need to make to a custom magento theme to enable our web-to-print extension.

= Files in `app/design/frontend/default/<your_theme_name>/` =

Modify files behind the user interface.

==template/catalog/product/list.phtml==
  * Replace line 51 (image for a product):
{{{
<img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(135, 135); ?>" width="135" height="135" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
}}}

  with following code:
{{{
<?php if($_product->hasData('w2p_image')): ?>
  <img style="max-width: 135px;" src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image'); ?>" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
<?php else: ?>
  <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(135, 135); ?>" width="135" height="135" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
<?php endif; ?>
}}}

  The new code disables image resizing for products with web-to-print feature.

  * Replace line 63 (add to cart button):
{{{
<button class="form-button" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><?php echo $this->__('Add to Cart') ?></span></button>
}}}

  with following code:
{{{
<?php if($_product->getData("w2p_image")): ?>
  <?php if(!$_product->getData("w2p_isorder")): ?>
    <button type="button" class="form-button" onclick="setLocation('<?php echo $_product->getProductUrl() ?>?preview=1')"><span><?php echo $this->__('Personalize') ?></span></button>
  <?php endif; ?>
<?php else: ?>
  <button class="form-button" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><?php echo $this->__('Add to Cart') ?></span></button>
<?php endif; ?>
}}}

  The new code checks if the product has web-to-print features and is not an already customized product (an order). In this case it shows a _Personalize_ button instead of _Add to Cart_.

  * Replace line 99 (image for a product):
{{{
<img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(135, 135); ?>" width="135" height="135" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
}}}

  with following code:
{{{
<?php if($_product->hasData('w2p_image')): ?>
  <img style="max-width: 135px;" src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image'); ?>" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
<?php else: ?>
  <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(135, 135); ?>" width="135" height="135" alt="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" title="<?php echo $this->htmlEscape($this->getImageLabel($_product, 'small_image')) ?>" />
<?php endif; ?>
}}}

  The new code disables image resizing for products with web-to-print feature.

  * Replace line 108 (add to cart button):
{{{
<button type="button" class="form-button" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><?php echo $this->__('Add to Cart') ?></span></button>
}}}

  with following code:
{{{
<?php if($_product->getData("w2p_image")): ?>
  <?php if(!$_product->getData("w2p_isorder")): ?>
    <button type="button" class="form-button" onclick="setLocation('<?php echo $_product->getProductUrl() ?>?preview=1')"><span><?php echo $this->__('Personalize') ?></span></button>
  <?php endif; ?>
<?php else: ?>
  <button type="button" class="form-button" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><?php echo $this->__('Add to Cart') 
<?php endif; ?>
}}}

  The new code checks if the product has web-to-print features and is not an already customized product (an order). In this case it shows a _Personalize_ button instead of _Add to Cart_.

==template/catalog/product/view/addtocart.phtml==

Replace lines 31-38 (add to cart button with wrapper html):

{{{
<fieldset class="add-to-cart-box">
  <legend><?php echo $this->__('Add Items to Cart') ?></legend>
  <?php if(!$_product->isGrouped()): ?>
    <span class="qty-box"><label for="qty"><?php echo $this->__('Qty') ?>:</label>
    <input name="qty" type="text" class="input-text qty" id="qty" maxlength="12" value="<?php echo $this->getMinimalQty($_product) ?>" /></span>
  <?php endif; ?>
  <button type="button" class="form-button" onclick="productAddToCartForm.submit()"><span><?php echo $this->__('Add to Cart') ?></span></button>
</fieldset>
}}}

with following code:

{{{
<?php if($_product->getData("w2p_image")): ?>
  <?php if(!$_product->getData("w2p_isorder")): ?>
    <input type="button" name="sosanh" value="PERSONALIZE" class="form-button" onclick="document.location='<?php echo $_product->getProductUrl() ?>?preview=1&order=';return false;"/>
  <?php endif; ?>
<?php else: ?>
  <fieldset class="add-to-cart-box">
    <legend><?php echo $this->__('Add Items to Cart') ?></legend>
    <?php if(!$_product->isGrouped()): ?>
      <span class="qty-box"><label for="qty"><?php echo $this->__('Qty') ?>:</label>
      <input name="qty" type="text" class="input-text qty" id="qty" maxlength="12" value="<?php echo $this->getMinimalQty($_product) ?>" /></span>
     <?php endif; ?>
     <button type="button" class="form-button" onclick="productAddToCartForm.submit()"><span><?php echo $this->__('Add to Cart') ?></span></button>
  </fieldset>
<?php endif; ?>
}}}

This new code checks if the product has web-to-print features and is not an already customized product (an order). In this case it shows a _Personalize_ button instead of _Add to Cart_.

==template/catalog/product/view.phtml==

Before making changes you need to decide how to organize templates personalization process: using ZetaPrints IFrame or Magento personalization form.

*Note:* Magento personalization form is replaced automatically with ZetaPrints IFrame for multipage templates.

===ZetaPrints IFrame===

After line 36 (getting current product object):

`$_product = $this->getProduct();`

insert following code:

{{{
$button = "";
$img = $_product->getData("w2p_image");

if ($img && !$_product->getData("w2p_isorder")) {
  $button = '<input type="button" name="sosanh" value="PERSONALIZE" class="Personallize" onclick="document.location=\'' . $_product->getProductUrl() . '?preview=1&order=\';return false;"/>';
}

$is_preview = isset($_REQUEST['preview']);
$order = isset($_REQUEST['order']) ? $_REQUEST['order'] : "";

if (isset($_REQUEST['order']) && $_REQUEST['order']) {
  $is_preview = 0;
}

if ($order){
  $logic = Mage::getModel('api/w2puser');
  $ret = $logic->order($order);

  if ($ret > 0) {
    echo '<script type="text/javascript">parent.document.location="' . $this->getUrl('checkout/cart/add') . '?&qty=1&product=' . $ret .'";</script>';
  } else {
    echo '<script type="text/javascript">parent.document.location="' . $this->getUrl('checkout/cart') .'";</script>';
  }

  return;
}

if ($img && $is_preview) {
  $logic = Mage::getModel('api/w2puser');
  $id = trim($_product->getSku());
  $w2p_url = $logic->getPersonalizeUrl($id);

  echo '<iframe src="' . $w2p_url .'" width="100%" height="1800px"></iframe>';

  return;
}
}}}

This new code checks what user is doing with product: making an order or personalizing it. In case of order it shows ordering page otherwise it shows an IFRAME with contents from ZP.

===Magento personalization form===

You can get new code for this file from our svn repository or from our web-to-print extension. See _app/design/frontend/default/zptheme/templates/catalog/product/view.phtml_ file.

This code is divided in four blocks. Each block enclosed with comments look like in the following example:

{{{
/****** ZP-CODE:1 Short description of code in the block ******/

some code

/****** ZP-CODE:1 End ******/
}}}

==template/catalog/product/gallery.phtml==

You can get new code for this file from our svn repository or from our web-to-print extension. See _app/design/frontend/default/zptheme/templates/catalog/product/gallery.phtml_ file.

This code is divided in two blocks. Each block enclosed with comments look like in the following example:

{{{
/****** ZP-CODE:1 Short description of code in the block ******/

some code

/****** ZP-CODE:1 End ******/
}}}

==template/catalog/product/view/media.phtml==

You can get new code for this file from our svn repository or from our web-to-print extension. See _app/design/frontend/default/zptheme/templates/catalog/product/view/media.phtml_ file.

This code is divided in two blocks. Each block enclosed with comments look like in the following example:

{{{
/****** ZP-CODE:1 Short description of code in the block ******/

some code

/****** ZP-CODE:1 End ******/
}}}

==template/page/2columns-right.phtml==

Before making changes you need to decide how to organize templates personalization process: using ZetaPrints IFrame or Magento personalization form.

*Note:* Magento personalization form is replaced automatically with ZetaPrints IFrame for multipage templates.

===ZetaPrints IFrame===

  * Before line 31:
{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
}}}

  insert code:
{{{
<?php $is_preview = isset($_REQUEST['preview']); ?>
}}}

  Checking if _Personalize_ button is clicked.

  * After line 36:
{{{
<body <?php echo $this->getBodyClass()?'class="'.$this->getBodyClass().'"':'' ?>>
}}}

  insert code:
{{{
<?php if (!$is_preview): ?>
}}}

  If _Personalize_ button isn't clicked show normal page.

  * After line 81:
{{{
<?php echo $this->getAbsoluteFooter() ?>
}}}

  insert code:
{{{
<?php else: ?>
  <div class="wrapper">
    <div class="header">
      <?php echo $this->getChildHtml('header') ?>
    </div>
  </div>

  <?php echo $this->getChildHtml('content') ?>
  <div class="wrapper">
    <div class="footer">
      <?php echo $this->getChildHtml('footer') ?>
    </div>
  </div>
<?php endif; ?>
}}}

  If _Personalize_ button is clicked show page without content. It'll be filled with iframe content.

===Magento personalization form===

You can get new code for this file from our svn repository or from our web-to-print extension. See _app/design/frontend/default/zptheme/templates/page/2columns-right.phtml_ file.

This code is divided in five blocks. Each block enclosed with comments look like in the following example:

{{{
/****** ZP-CODE:1 Short description of code in the block ******/

some code

/****** ZP-CODE:1 End ******/
}}}

*Note on ZP-CODE:3 block*: you can get this files from our svn repository or from our web-to-print extension. See `skin/frontend/default/zptheme/` directory. Copy this resource files from _css, images, js_ directories into `<magento_installation>/skin/frontend/default/<your_theme_name>/(css, images, js)` directories of your custom theme, accordingly.

Resource files description:
  * `js/jquery-1.3.2.min.js`, `js/jquery-ui-1.7.2.custom.min.js` - jQuery and jQuery UI libs
  * `js/colorpicker.js`, `css/colorpicker.css` - Colorpicker jQuery plugin
  * `js/jquery-qtip-1.0.0-rc3.min.js` - QTip jQuery plugin
  * `js/jquery.dd.js`, `css/dd.css` - Enhanced dropdown component plugin for jQuery
  * `js/jquery.vchecks.js`, `css/checks.css` - Enhanced checkbox component plugin for jQuery
  * `js/jquery.fancybox-1.2.1.pack.js`, `css/jquery.fancybox.css`, `images/fancybox/*` - FancyBox jQuery plugin
  * `css/zp-style.css` - Additional styles for magento personalization form